/**
 * TempApi
 * This is a sample openApi document
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: lampralexandros@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Wabli from '../model/Wabli';

/**
* Wabli service.
* @module api/WabliApi
* @version 1.0.0
*/
export default class WabliApi {

    /**
    * Constructs a new WabliApi. 
    * @alias module:api/WabliApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createwabli operation.
     * @callback module:api/WabliApi~createwabliCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Wabli} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates the data
     * @param {module:model/Wabli} wabli data to be created
     * @param {module:api/WabliApi~createwabliCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Wabli}
     */
    createwabli(wabli, callback) {
      let postBody = wabli;
      // verify the required parameter 'wabli' is set
      if (wabli === undefined || wabli === null) {
        throw new Error("Missing the required parameter 'wabli' when calling createwabli");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Wabli;
      return this.apiClient.callApi(
        '/wabli', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletewabli operation.
     * @callback module:api/WabliApi~deletewabliCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the element
     * @param {String} wabliId the Id parameter
     * @param {module:api/WabliApi~deletewabliCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletewabli(wabliId, callback) {
      let postBody = null;
      // verify the required parameter 'wabliId' is set
      if (wabliId === undefined || wabliId === null) {
        throw new Error("Missing the required parameter 'wabliId' when calling deletewabli");
      }

      let pathParams = {
        'wabliId': wabliId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/wabli/{wabliId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllwabli operation.
     * @callback module:api/WabliApi~getAllwabliCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Wabli>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the data
     * @param {module:api/WabliApi~getAllwabliCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Wabli>}
     */
    getAllwabli(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Wabli];
      return this.apiClient.callApi(
        '/wabli/getAll', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getwabli operation.
     * @callback module:api/WabliApi~getwabliCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Wabli} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the element
     * @param {String} wabliId the Id parameter
     * @param {module:api/WabliApi~getwabliCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Wabli}
     */
    getwabli(wabliId, callback) {
      let postBody = null;
      // verify the required parameter 'wabliId' is set
      if (wabliId === undefined || wabliId === null) {
        throw new Error("Missing the required parameter 'wabliId' when calling getwabli");
      }

      let pathParams = {
        'wabliId': wabliId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Wabli;
      return this.apiClient.callApi(
        '/wabli/{wabliId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatewabli operation.
     * @callback module:api/WabliApi~updatewabliCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Wabli} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the element
     * @param {String} wabliId the Id parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/Wabli} opts.wabli data to be updated
     * @param {module:api/WabliApi~updatewabliCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Wabli}
     */
    updatewabli(wabliId, opts, callback) {
      opts = opts || {};
      let postBody = opts['wabli'];
      // verify the required parameter 'wabliId' is set
      if (wabliId === undefined || wabliId === null) {
        throw new Error("Missing the required parameter 'wabliId' when calling updatewabli");
      }

      let pathParams = {
        'wabliId': wabliId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Wabli;
      return this.apiClient.callApi(
        '/wabli/{wabliId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
